// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __ConfigurationInterface_hh__
#define __ConfigurationInterface_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
#endif



#ifndef __StdException_hh_EXTERNAL_GUARD__
#define __StdException_hh_EXTERNAL_GUARD__
#include "StdExceptionC.h"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RTT

_CORBA_MODULE_BEG

  _CORBA_MODULE corba

  _CORBA_MODULE_BEG

#ifndef __RTT_mcorba_mCConfigurationInterface__
#define __RTT_mcorba_mCConfigurationInterface__

    class CConfigurationInterface;
    class _objref_CConfigurationInterface;
    class _impl_CConfigurationInterface;
    
    typedef _objref_CConfigurationInterface* CConfigurationInterface_ptr;
    typedef CConfigurationInterface_ptr CConfigurationInterfaceRef;

    class CConfigurationInterface_Helper {
    public:
      typedef CConfigurationInterface_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_CConfigurationInterface, CConfigurationInterface_Helper> CConfigurationInterface_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_CConfigurationInterface,CConfigurationInterface_Helper > CConfigurationInterface_out;

#endif

    // interface CConfigurationInterface
    class CConfigurationInterface {
    public:
      // Declarations for this interface type.
      typedef CConfigurationInterface_ptr _ptr_type;
      typedef CConfigurationInterface_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      struct CProperty {
        typedef _CORBA_ConstrType_Variable_Var<CProperty> _var_type;

        
        ::CORBA::String_member name;

        ::CORBA::String_member description;

      

        void operator>>= (cdrStream &) const;
        void operator<<= (cdrStream &);
      };

      typedef CProperty::_var_type CProperty_var;

      typedef _CORBA_ConstrType_Variable_OUT_arg< CProperty,CProperty_var > CProperty_out;

      static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CProperty;

      static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CPropertyNames;

      class CPropertyNames_var;

      class CPropertyNames : public _CORBA_Unbounded_Sequence< CProperty >  {
      public:
        typedef CPropertyNames_var _var_type;
        inline CPropertyNames() {}
        inline CPropertyNames(const CPropertyNames& _s)
          : _CORBA_Unbounded_Sequence< CProperty > (_s) {}

        inline CPropertyNames(_CORBA_ULong _max)
          : _CORBA_Unbounded_Sequence< CProperty > (_max) {}
        inline CPropertyNames(_CORBA_ULong _max, _CORBA_ULong _len, CProperty* _val, _CORBA_Boolean _rel=0)
          : _CORBA_Unbounded_Sequence< CProperty > (_max, _len, _val, _rel) {}

      

        inline CPropertyNames& operator = (const CPropertyNames& _s) {
          _CORBA_Unbounded_Sequence< CProperty > ::operator=(_s);
          return *this;
        }
      };

      class CPropertyNames_out;

      class CPropertyNames_var {
      public:
        inline CPropertyNames_var() : _pd_seq(0) {}
        inline CPropertyNames_var(CPropertyNames* _s) : _pd_seq(_s) {}
        inline CPropertyNames_var(const CPropertyNames_var& _s) {
          if( _s._pd_seq )  _pd_seq = new CPropertyNames(*_s._pd_seq);
          else              _pd_seq = 0;
        }
        inline ~CPropertyNames_var() { if( _pd_seq )  delete _pd_seq; }
          
        inline CPropertyNames_var& operator = (CPropertyNames* _s) {
          if( _pd_seq )  delete _pd_seq;
          _pd_seq = _s;
          return *this;
        }
        inline CPropertyNames_var& operator = (const CPropertyNames_var& _s) {
          if( _s._pd_seq ) {
            if( !_pd_seq )  _pd_seq = new CPropertyNames;
            *_pd_seq = *_s._pd_seq;
          } else if( _pd_seq ) {
            delete _pd_seq;
            _pd_seq = 0;
          }
          return *this;
        }
        inline CProperty& operator [] (_CORBA_ULong _s) {
          return (*_pd_seq)[_s];
        }

      

        inline CPropertyNames* operator -> () { return _pd_seq; }
        inline const CPropertyNames* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
        inline operator CPropertyNames& () const { return *_pd_seq; }
#else
        inline operator const CPropertyNames& () const { return *_pd_seq; }
        inline operator CPropertyNames& () { return *_pd_seq; }
#endif
          
        inline const CPropertyNames& in() const { return *_pd_seq; }
        inline CPropertyNames&       inout()    { return *_pd_seq; }
        inline CPropertyNames*&      out() {
          if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
          return _pd_seq;
        }
        inline CPropertyNames* _retn() { CPropertyNames* tmp = _pd_seq; _pd_seq = 0; return tmp; }
          
        friend class CPropertyNames_out;
        
      private:
        CPropertyNames* _pd_seq;
      };

      class CPropertyNames_out {
      public:
        inline CPropertyNames_out(CPropertyNames*& _s) : _data(_s) { _data = 0; }
        inline CPropertyNames_out(CPropertyNames_var& _s)
          : _data(_s._pd_seq) { _s = (CPropertyNames*) 0; }
        inline CPropertyNames_out(const CPropertyNames_out& _s) : _data(_s._data) {}
        inline CPropertyNames_out& operator = (const CPropertyNames_out& _s) {
          _data = _s._data;
          return *this;
        }
        inline CPropertyNames_out& operator = (CPropertyNames* _s) {
          _data = _s;
          return *this;
        }
        inline operator CPropertyNames*&()  { return _data; }
        inline CPropertyNames*& ptr()       { return _data; }
        inline CPropertyNames* operator->() { return _data; }

        inline CProperty& operator [] (_CORBA_ULong _i) {
          return (*_data)[_i];
        }

      

        CPropertyNames*& _data;

      private:
        CPropertyNames_out();
        CPropertyNames_out& operator=(const CPropertyNames_var&);
      };

      static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CAttributeNames;

      class CAttributeNames_var;

      class CAttributeNames : public _CORBA_Unbounded_Sequence_String {
      public:
        typedef CAttributeNames_var _var_type;
        inline CAttributeNames() {}
        inline CAttributeNames(const CAttributeNames& _s)
          : _CORBA_Unbounded_Sequence_String(_s) {}

        inline CAttributeNames(_CORBA_ULong _max)
          : _CORBA_Unbounded_Sequence_String(_max) {}
        inline CAttributeNames(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
          : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

      

        inline CAttributeNames& operator = (const CAttributeNames& _s) {
          _CORBA_Unbounded_Sequence_String::operator=(_s);
          return *this;
        }
      };

      class CAttributeNames_out;

      class CAttributeNames_var {
      public:
        inline CAttributeNames_var() : _pd_seq(0) {}
        inline CAttributeNames_var(CAttributeNames* _s) : _pd_seq(_s) {}
        inline CAttributeNames_var(const CAttributeNames_var& _s) {
          if( _s._pd_seq )  _pd_seq = new CAttributeNames(*_s._pd_seq);
          else              _pd_seq = 0;
        }
        inline ~CAttributeNames_var() { if( _pd_seq )  delete _pd_seq; }
          
        inline CAttributeNames_var& operator = (CAttributeNames* _s) {
          if( _pd_seq )  delete _pd_seq;
          _pd_seq = _s;
          return *this;
        }
        inline CAttributeNames_var& operator = (const CAttributeNames_var& _s) {
          if( _s._pd_seq ) {
            if( !_pd_seq )  _pd_seq = new CAttributeNames;
            *_pd_seq = *_s._pd_seq;
          } else if( _pd_seq ) {
            delete _pd_seq;
            _pd_seq = 0;
          }
          return *this;
        }
        inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
          return (*_pd_seq)[_s];
        }

      

        inline CAttributeNames* operator -> () { return _pd_seq; }
        inline const CAttributeNames* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
        inline operator CAttributeNames& () const { return *_pd_seq; }
#else
        inline operator const CAttributeNames& () const { return *_pd_seq; }
        inline operator CAttributeNames& () { return *_pd_seq; }
#endif
          
        inline const CAttributeNames& in() const { return *_pd_seq; }
        inline CAttributeNames&       inout()    { return *_pd_seq; }
        inline CAttributeNames*&      out() {
          if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
          return _pd_seq;
        }
        inline CAttributeNames* _retn() { CAttributeNames* tmp = _pd_seq; _pd_seq = 0; return tmp; }
          
        friend class CAttributeNames_out;
        
      private:
        CAttributeNames* _pd_seq;
      };

      class CAttributeNames_out {
      public:
        inline CAttributeNames_out(CAttributeNames*& _s) : _data(_s) { _data = 0; }
        inline CAttributeNames_out(CAttributeNames_var& _s)
          : _data(_s._pd_seq) { _s = (CAttributeNames*) 0; }
        inline CAttributeNames_out(const CAttributeNames_out& _s) : _data(_s._data) {}
        inline CAttributeNames_out& operator = (const CAttributeNames_out& _s) {
          _data = _s._data;
          return *this;
        }
        inline CAttributeNames_out& operator = (CAttributeNames* _s) {
          _data = _s;
          return *this;
        }
        inline operator CAttributeNames*&()  { return _data; }
        inline CAttributeNames*& ptr()       { return _data; }
        inline CAttributeNames* operator->() { return _data; }

        inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
          return (*_data)[_i];
        }

      

        CAttributeNames*& _data;

      private:
        CAttributeNames_out();
        CAttributeNames_out& operator=(const CAttributeNames_var&);
      };

    
    };

    class _objref_CConfigurationInterface :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      CConfigurationInterface::CAttributeNames* getAttributeList();
      CConfigurationInterface::CPropertyNames* getPropertyList();
      ::CORBA::Any* getAttribute(const char* name);
      ::CORBA::Boolean setAttribute(const char* name, const ::CORBA::Any& value);
      ::CORBA::Boolean hasAttribute(const char* name);
      ::CORBA::Boolean hasProperty(const char* name);
      ::CORBA::Any* getProperty(const char* name);
      ::CORBA::Boolean setProperty(const char* name, const ::CORBA::Any& value);
      char* getPropertyType(const char* name);
      char* getAttributeType(const char* name);
      char* getPropertyTypeName(const char* name);
      char* getAttributeTypeName(const char* name);
      char* attributeToString(const char* name);
      char* propertyToString(const char* name);
      ::CORBA::Boolean attributeFromString(const char* name, const char* value);
      ::CORBA::Boolean propertyFromString(const char* name, const char* value);
      ::CORBA::Boolean isAttributeAssignable(const char* name);

      inline _objref_CConfigurationInterface()  { _PR_setobj(0); }  // nil
      _objref_CConfigurationInterface(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_CConfigurationInterface();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_CConfigurationInterface(const _objref_CConfigurationInterface&);
      _objref_CConfigurationInterface& operator = (const _objref_CConfigurationInterface&);
      // not implemented

      friend class CConfigurationInterface;
    };

    class _pof_CConfigurationInterface : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_CConfigurationInterface() : _OMNI_NS(proxyObjectFactory)(CConfigurationInterface::_PD_repoId) {}
      virtual ~_pof_CConfigurationInterface();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_CConfigurationInterface :
      public virtual omniServant
    {
    public:
      virtual ~_impl_CConfigurationInterface();

      virtual CConfigurationInterface::CAttributeNames* getAttributeList() = 0;
      virtual CConfigurationInterface::CPropertyNames* getPropertyList() = 0;
      virtual ::CORBA::Any* getAttribute(const char* name) = 0;
      virtual ::CORBA::Boolean setAttribute(const char* name, const ::CORBA::Any& value) = 0;
      virtual ::CORBA::Boolean hasAttribute(const char* name) = 0;
      virtual ::CORBA::Boolean hasProperty(const char* name) = 0;
      virtual ::CORBA::Any* getProperty(const char* name) = 0;
      virtual ::CORBA::Boolean setProperty(const char* name, const ::CORBA::Any& value) = 0;
      virtual char* getPropertyType(const char* name) = 0;
      virtual char* getAttributeType(const char* name) = 0;
      virtual char* getPropertyTypeName(const char* name) = 0;
      virtual char* getAttributeTypeName(const char* name) = 0;
      virtual char* attributeToString(const char* name) = 0;
      virtual char* propertyToString(const char* name) = 0;
      virtual ::CORBA::Boolean attributeFromString(const char* name, const char* value) = 0;
      virtual ::CORBA::Boolean propertyFromString(const char* name, const char* value) = 0;
      virtual ::CORBA::Boolean isAttributeAssignable(const char* name) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CConfigurationInterface;

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

    class CConfigurationInterface :
      public virtual RTT::corba::_impl_CConfigurationInterface,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~CConfigurationInterface();

      inline ::RTT::corba::CConfigurationInterface_ptr _this() {
        return (::RTT::corba::CConfigurationInterface_ptr) _do_this(::RTT::corba::CConfigurationInterface::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const RTT::corba::CConfigurationInterface::CProperty& _s);
extern void operator<<=(::CORBA::Any& _a, RTT::corba::CConfigurationInterface::CProperty* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CConfigurationInterface::CProperty*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CConfigurationInterface::CProperty*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CConfigurationInterface::CPropertyNames& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CConfigurationInterface::CPropertyNames* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CConfigurationInterface::CPropertyNames*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CConfigurationInterface::CPropertyNames*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CConfigurationInterface::CAttributeNames& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CConfigurationInterface::CAttributeNames* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CConfigurationInterface::CAttributeNames*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CConfigurationInterface::CAttributeNames*& _sp);

void operator<<=(::CORBA::Any& _a, RTT::corba::CConfigurationInterface_ptr _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CConfigurationInterface_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CConfigurationInterface_ptr& _s);



inline void
RTT::corba::CConfigurationInterface::_marshalObjRef(::RTT::corba::CConfigurationInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_ConfigurationInterface
#endif

#endif  // __ConfigurationInterface_hh__

