// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __TaskContext_hh__
#define __TaskContext_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_TaskContext
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_TaskContext
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_TaskContext
#endif



#ifndef __StdException_hh_EXTERNAL_GUARD__
#define __StdException_hh_EXTERNAL_GUARD__
#include "StdExceptionC.h"
#endif
#ifndef __ConfigurationInterface_hh_EXTERNAL_GUARD__
#define __ConfigurationInterface_hh_EXTERNAL_GUARD__
#include "ConfigurationInterfaceC.h"
#endif
#ifndef __OperationInterface_hh_EXTERNAL_GUARD__
#define __OperationInterface_hh_EXTERNAL_GUARD__
#include "OperationInterfaceC.h"
#endif
#ifndef __DataFlow_hh_EXTERNAL_GUARD__
#define __DataFlow_hh_EXTERNAL_GUARD__
#include "DataFlowC.h"
#endif
#ifndef __Service_hh_EXTERNAL_GUARD__
#define __Service_hh_EXTERNAL_GUARD__
#include "ServiceC.h"
#endif
#ifndef __ServiceRequester_hh_EXTERNAL_GUARD__
#define __ServiceRequester_hh_EXTERNAL_GUARD__
#include "ServiceRequesterC.h"
#endif



#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RTT

_CORBA_MODULE_BEG

  _CORBA_MODULE corba

  _CORBA_MODULE_BEG

    enum CTaskState { CInit, CPreOperational, CFatalError, CException, CStopped, CRunning, CRunTimeError /*, __max_CTaskState=0xffffffff */ };
    typedef CTaskState& CTaskState_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CTaskState;

#ifndef __RTT_mcorba_mCTaskContext__
#define __RTT_mcorba_mCTaskContext__

    class CTaskContext;
    class _objref_CTaskContext;
    class _impl_CTaskContext;
    
    typedef _objref_CTaskContext* CTaskContext_ptr;
    typedef CTaskContext_ptr CTaskContextRef;

    class CTaskContext_Helper {
    public:
      typedef CTaskContext_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_CTaskContext, CTaskContext_Helper> CTaskContext_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_CTaskContext,CTaskContext_Helper > CTaskContext_out;

#endif

    // interface CTaskContext
    class CTaskContext {
    public:
      // Declarations for this interface type.
      typedef CTaskContext_ptr _ptr_type;
      typedef CTaskContext_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CPeerNames;

      class CPeerNames_var;

      class CPeerNames : public _CORBA_Unbounded_Sequence_String {
      public:
        typedef CPeerNames_var _var_type;
        inline CPeerNames() {}
        inline CPeerNames(const CPeerNames& _s)
          : _CORBA_Unbounded_Sequence_String(_s) {}

        inline CPeerNames(_CORBA_ULong _max)
          : _CORBA_Unbounded_Sequence_String(_max) {}
        inline CPeerNames(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
          : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

      

        inline CPeerNames& operator = (const CPeerNames& _s) {
          _CORBA_Unbounded_Sequence_String::operator=(_s);
          return *this;
        }
      };

      class CPeerNames_out;

      class CPeerNames_var {
      public:
        inline CPeerNames_var() : _pd_seq(0) {}
        inline CPeerNames_var(CPeerNames* _s) : _pd_seq(_s) {}
        inline CPeerNames_var(const CPeerNames_var& _s) {
          if( _s._pd_seq )  _pd_seq = new CPeerNames(*_s._pd_seq);
          else              _pd_seq = 0;
        }
        inline ~CPeerNames_var() { if( _pd_seq )  delete _pd_seq; }
          
        inline CPeerNames_var& operator = (CPeerNames* _s) {
          if( _pd_seq )  delete _pd_seq;
          _pd_seq = _s;
          return *this;
        }
        inline CPeerNames_var& operator = (const CPeerNames_var& _s) {
          if( _s._pd_seq ) {
            if( !_pd_seq )  _pd_seq = new CPeerNames;
            *_pd_seq = *_s._pd_seq;
          } else if( _pd_seq ) {
            delete _pd_seq;
            _pd_seq = 0;
          }
          return *this;
        }
        inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
          return (*_pd_seq)[_s];
        }

      

        inline CPeerNames* operator -> () { return _pd_seq; }
        inline const CPeerNames* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
        inline operator CPeerNames& () const { return *_pd_seq; }
#else
        inline operator const CPeerNames& () const { return *_pd_seq; }
        inline operator CPeerNames& () { return *_pd_seq; }
#endif
          
        inline const CPeerNames& in() const { return *_pd_seq; }
        inline CPeerNames&       inout()    { return *_pd_seq; }
        inline CPeerNames*&      out() {
          if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
          return _pd_seq;
        }
        inline CPeerNames* _retn() { CPeerNames* tmp = _pd_seq; _pd_seq = 0; return tmp; }
          
        friend class CPeerNames_out;
        
      private:
        CPeerNames* _pd_seq;
      };

      class CPeerNames_out {
      public:
        inline CPeerNames_out(CPeerNames*& _s) : _data(_s) { _data = 0; }
        inline CPeerNames_out(CPeerNames_var& _s)
          : _data(_s._pd_seq) { _s = (CPeerNames*) 0; }
        inline CPeerNames_out(const CPeerNames_out& _s) : _data(_s._data) {}
        inline CPeerNames_out& operator = (const CPeerNames_out& _s) {
          _data = _s._data;
          return *this;
        }
        inline CPeerNames_out& operator = (CPeerNames* _s) {
          _data = _s;
          return *this;
        }
        inline operator CPeerNames*&()  { return _data; }
        inline CPeerNames*& ptr()       { return _data; }
        inline CPeerNames* operator->() { return _data; }

        inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
          return (*_data)[_i];
        }

      

        CPeerNames*& _data;

      private:
        CPeerNames_out();
        CPeerNames_out& operator=(const CPeerNames_var&);
      };

    
    };

    class _objref_CTaskContext :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      char* getName();
      char* getDescription();
      CTaskState getTaskState();
      ::CORBA::Boolean configure();
      ::CORBA::Boolean start();
      ::CORBA::Boolean activate();
      ::CORBA::Boolean stop();
      ::CORBA::Boolean resetException();
      ::CORBA::Boolean cleanup();
      ::CORBA::Boolean isActive();
      ::CORBA::Boolean isRunning();
      ::CORBA::Boolean isConfigured();
      ::CORBA::Boolean inFatalError();
      ::CORBA::Boolean inRunTimeError();
      CDataFlowInterface_ptr ports();
      CService_ptr getProvider(const char* service_name);
      CServiceRequester_ptr getRequester(const char* service_name);
      CTaskContext::CPeerNames* getPeerList();
      CTaskContext_ptr getPeer(const char* name);
      ::CORBA::Boolean hasPeer(const char* name);
      ::CORBA::Boolean addPeer(::RTT::corba::CTaskContext_ptr p, const char* peer_alias);
      ::CORBA::Boolean removePeer(const char* name);
      ::CORBA::Boolean connectPeers(::RTT::corba::CTaskContext_ptr p);
      ::CORBA::Boolean disconnectPeers(const char* name);
      ::CORBA::Boolean connectPorts(::RTT::corba::CTaskContext_ptr p);
      ::CORBA::Boolean connectServices(::RTT::corba::CTaskContext_ptr p);

      inline _objref_CTaskContext()  { _PR_setobj(0); }  // nil
      _objref_CTaskContext(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_CTaskContext();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_CTaskContext(const _objref_CTaskContext&);
      _objref_CTaskContext& operator = (const _objref_CTaskContext&);
      // not implemented

      friend class CTaskContext;
    };

    class _pof_CTaskContext : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_CTaskContext() : _OMNI_NS(proxyObjectFactory)(CTaskContext::_PD_repoId) {}
      virtual ~_pof_CTaskContext();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_CTaskContext :
      public virtual omniServant
    {
    public:
      virtual ~_impl_CTaskContext();

      virtual char* getName() = 0;
      virtual char* getDescription() = 0;
      virtual CTaskState getTaskState() = 0;
      virtual ::CORBA::Boolean configure() = 0;
      virtual ::CORBA::Boolean start() = 0;
      virtual ::CORBA::Boolean activate() = 0;
      virtual ::CORBA::Boolean stop() = 0;
      virtual ::CORBA::Boolean resetException() = 0;
      virtual ::CORBA::Boolean cleanup() = 0;
      virtual ::CORBA::Boolean isActive() = 0;
      virtual ::CORBA::Boolean isRunning() = 0;
      virtual ::CORBA::Boolean isConfigured() = 0;
      virtual ::CORBA::Boolean inFatalError() = 0;
      virtual ::CORBA::Boolean inRunTimeError() = 0;
      virtual CDataFlowInterface_ptr ports() = 0;
      virtual CService_ptr getProvider(const char* service_name) = 0;
      virtual CServiceRequester_ptr getRequester(const char* service_name) = 0;
      virtual CTaskContext::CPeerNames* getPeerList() = 0;
      virtual CTaskContext_ptr getPeer(const char* name) = 0;
      virtual ::CORBA::Boolean hasPeer(const char* name) = 0;
      virtual ::CORBA::Boolean addPeer(::RTT::corba::CTaskContext_ptr p, const char* peer_alias) = 0;
      virtual ::CORBA::Boolean removePeer(const char* name) = 0;
      virtual ::CORBA::Boolean connectPeers(::RTT::corba::CTaskContext_ptr p) = 0;
      virtual ::CORBA::Boolean disconnectPeers(const char* name) = 0;
      virtual ::CORBA::Boolean connectPorts(::RTT::corba::CTaskContext_ptr p) = 0;
      virtual ::CORBA::Boolean connectServices(::RTT::corba::CTaskContext_ptr p) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CTaskContext;

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

    class CTaskContext :
      public virtual RTT::corba::_impl_CTaskContext,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~CTaskContext();

      inline ::RTT::corba::CTaskContext_ptr _this() {
        return (::RTT::corba::CTaskContext_ptr) _do_this(::RTT::corba::CTaskContext::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(RTT::corba::CTaskState _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTT::corba::CTaskState& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTT::corba::CRunTimeError) {
    _e = (RTT::corba::CTaskState) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTT::corba::CTaskState _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CTaskState& _s);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CTaskContext::CPeerNames& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CTaskContext::CPeerNames* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CTaskContext::CPeerNames*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CTaskContext::CPeerNames*& _sp);

void operator<<=(::CORBA::Any& _a, RTT::corba::CTaskContext_ptr _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CTaskContext_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CTaskContext_ptr& _s);



inline void
RTT::corba::CTaskContext::_marshalObjRef(::RTT::corba::CTaskContext_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_TaskContext
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_TaskContext
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_TaskContext
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_TaskContext
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_TaskContext
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_TaskContext
#endif

#endif  // __TaskContext_hh__

