// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __DataFlow_hh__
#define __DataFlow_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_DataFlow
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_DataFlow
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataFlow
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RTT

_CORBA_MODULE_BEG

  _CORBA_MODULE corba

  _CORBA_MODULE_BEG

    enum CFlowStatus { CNoData, COldData, CNewData /*, __max_CFlowStatus=0xffffffff */ };
    typedef CFlowStatus& CFlowStatus_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CFlowStatus;

    enum CConnectionModel { CData, CBuffer, CCircularBuffer /*, __max_CConnectionModel=0xffffffff */ };
    typedef CConnectionModel& CConnectionModel_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CConnectionModel;

    enum CLockPolicy { CUnsync, CLocked, CLockFree /*, __max_CLockPolicy=0xffffffff */ };
    typedef CLockPolicy& CLockPolicy_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CLockPolicy;

    struct CConnPolicy {
      typedef _CORBA_ConstrType_Variable_Var<CConnPolicy> _var_type;

      
      CConnectionModel type;

      ::CORBA::Boolean init;

      CLockPolicy lock_policy;

      ::CORBA::Boolean pull;

      ::CORBA::Long size;

      ::CORBA::Long transport;

      ::CORBA::Long data_size;

      ::CORBA::String_member name_id;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CConnPolicy::_var_type CConnPolicy_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CConnPolicy,CConnPolicy_var > CConnPolicy_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CConnPolicy;

#ifndef __RTT_mcorba_mCChannelElement__
#define __RTT_mcorba_mCChannelElement__

    class CChannelElement;
    class _objref_CChannelElement;
    class _impl_CChannelElement;
    
    typedef _objref_CChannelElement* CChannelElement_ptr;
    typedef CChannelElement_ptr CChannelElementRef;

    class CChannelElement_Helper {
    public:
      typedef CChannelElement_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_CChannelElement, CChannelElement_Helper> CChannelElement_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_CChannelElement,CChannelElement_Helper > CChannelElement_out;

#endif

    // interface CChannelElement
    class CChannelElement {
    public:
      // Declarations for this interface type.
      typedef CChannelElement_ptr _ptr_type;
      typedef CChannelElement_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_CChannelElement :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      CFlowStatus read(::CORBA::Any_OUT_arg sample, ::CORBA::Boolean copy_old_data);
      ::CORBA::Boolean write(const ::CORBA::Any& sample);
      void disconnect();

      inline _objref_CChannelElement()  { _PR_setobj(0); }  // nil
      _objref_CChannelElement(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_CChannelElement();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_CChannelElement(const _objref_CChannelElement&);
      _objref_CChannelElement& operator = (const _objref_CChannelElement&);
      // not implemented

      friend class CChannelElement;
    };

    class _pof_CChannelElement : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_CChannelElement() : _OMNI_NS(proxyObjectFactory)(CChannelElement::_PD_repoId) {}
      virtual ~_pof_CChannelElement();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_CChannelElement :
      public virtual omniServant
    {
    public:
      virtual ~_impl_CChannelElement();

      virtual CFlowStatus read(::CORBA::Any_OUT_arg sample, ::CORBA::Boolean copy_old_data) = 0;
      virtual ::CORBA::Boolean write(const ::CORBA::Any& sample) = 0;
      virtual void disconnect() = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CChannelElement;

#ifndef __RTT_mcorba_mCRemoteChannelElement__
#define __RTT_mcorba_mCRemoteChannelElement__

    class CRemoteChannelElement;
    class _objref_CRemoteChannelElement;
    class _impl_CRemoteChannelElement;
    
    typedef _objref_CRemoteChannelElement* CRemoteChannelElement_ptr;
    typedef CRemoteChannelElement_ptr CRemoteChannelElementRef;

    class CRemoteChannelElement_Helper {
    public:
      typedef CRemoteChannelElement_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_CRemoteChannelElement, CRemoteChannelElement_Helper> CRemoteChannelElement_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_CRemoteChannelElement,CRemoteChannelElement_Helper > CRemoteChannelElement_out;

#endif

    // interface CRemoteChannelElement
    class CRemoteChannelElement {
    public:
      // Declarations for this interface type.
      typedef CRemoteChannelElement_ptr _ptr_type;
      typedef CRemoteChannelElement_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      
    };

    class _objref_CRemoteChannelElement :
      public virtual _objref_CChannelElement
    {
    public:
      void setRemoteSide(::RTT::corba::CRemoteChannelElement_ptr other);
      void remoteSignal();
      void remoteDisconnect(::CORBA::Boolean writer_to_reader);

      inline _objref_CRemoteChannelElement()  { _PR_setobj(0); }  // nil
      _objref_CRemoteChannelElement(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_CRemoteChannelElement();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_CRemoteChannelElement(const _objref_CRemoteChannelElement&);
      _objref_CRemoteChannelElement& operator = (const _objref_CRemoteChannelElement&);
      // not implemented

      friend class CRemoteChannelElement;
    };

    class _pof_CRemoteChannelElement : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_CRemoteChannelElement() : _OMNI_NS(proxyObjectFactory)(CRemoteChannelElement::_PD_repoId) {}
      virtual ~_pof_CRemoteChannelElement();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_CRemoteChannelElement :
      public virtual _impl_CChannelElement
    {
    public:
      virtual ~_impl_CRemoteChannelElement();

      virtual void setRemoteSide(::RTT::corba::CRemoteChannelElement_ptr other) = 0;
      virtual void remoteSignal() = 0;
      virtual void remoteDisconnect(::CORBA::Boolean writer_to_reader) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CRemoteChannelElement;

    class CNoSuchPortException : public ::CORBA::UserException {
    public:
      
      

      inline CNoSuchPortException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      CNoSuchPortException(const CNoSuchPortException&);
      
      CNoSuchPortException& operator=(const CNoSuchPortException&);
      virtual ~CNoSuchPortException();
      virtual void _raise() const;
      static CNoSuchPortException* _downcast(::CORBA::Exception*);
      static const CNoSuchPortException* _downcast(const ::CORBA::Exception*);
      static inline CNoSuchPortException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CNoSuchPortException;

    class CNoCorbaTransport : public ::CORBA::UserException {
    public:
      
      

      inline CNoCorbaTransport() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      CNoCorbaTransport(const CNoCorbaTransport&);
      
      CNoCorbaTransport& operator=(const CNoCorbaTransport&);
      virtual ~CNoCorbaTransport();
      virtual void _raise() const;
      static CNoCorbaTransport* _downcast(::CORBA::Exception*);
      static const CNoCorbaTransport* _downcast(const ::CORBA::Exception*);
      static inline CNoCorbaTransport* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CNoCorbaTransport;

    enum CPortType { CInput, COutput /*, __max_CPortType=0xffffffff */ };
    typedef CPortType& CPortType_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CPortType;

    struct CPortDescription {
      typedef _CORBA_ConstrType_Variable_Var<CPortDescription> _var_type;

      
      CPortType type;

      ::CORBA::String_member name;

      ::CORBA::String_member type_name;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef CPortDescription::_var_type CPortDescription_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< CPortDescription,CPortDescription_var > CPortDescription_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CPortDescription;

#ifndef __RTT_mcorba_mCDataFlowInterface__
#define __RTT_mcorba_mCDataFlowInterface__

    class CDataFlowInterface;
    class _objref_CDataFlowInterface;
    class _impl_CDataFlowInterface;
    
    typedef _objref_CDataFlowInterface* CDataFlowInterface_ptr;
    typedef CDataFlowInterface_ptr CDataFlowInterfaceRef;

    class CDataFlowInterface_Helper {
    public:
      typedef CDataFlowInterface_ptr _ptr_type;

      static _ptr_type _nil();
      static _CORBA_Boolean is_nil(_ptr_type);
      static void release(_ptr_type);
      static void duplicate(_ptr_type);
      static void marshalObjRef(_ptr_type, cdrStream&);
      static _ptr_type unmarshalObjRef(cdrStream&);
    };

    typedef _CORBA_ObjRef_Var<_objref_CDataFlowInterface, CDataFlowInterface_Helper> CDataFlowInterface_var;
    typedef _CORBA_ObjRef_OUT_arg<_objref_CDataFlowInterface,CDataFlowInterface_Helper > CDataFlowInterface_out;

#endif

    // interface CDataFlowInterface
    class CDataFlowInterface {
    public:
      // Declarations for this interface type.
      typedef CDataFlowInterface_ptr _ptr_type;
      typedef CDataFlowInterface_var _var_type;

      static _ptr_type _duplicate(_ptr_type);
      static _ptr_type _narrow(::CORBA::Object_ptr);
      static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
      
      static _ptr_type _nil();

      static inline void _marshalObjRef(_ptr_type, cdrStream&);

      static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
        omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
        if (o)
          return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
        else
          return _nil();
      }

      static _core_attr const char* _PD_repoId;

      // Other IDL defined within this scope.
      static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CPortNames;

      class CPortNames_var;

      class CPortNames : public _CORBA_Unbounded_Sequence_String {
      public:
        typedef CPortNames_var _var_type;
        inline CPortNames() {}
        inline CPortNames(const CPortNames& _s)
          : _CORBA_Unbounded_Sequence_String(_s) {}

        inline CPortNames(_CORBA_ULong _max)
          : _CORBA_Unbounded_Sequence_String(_max) {}
        inline CPortNames(_CORBA_ULong _max, _CORBA_ULong _len, char** _val, _CORBA_Boolean _rel=0)
          : _CORBA_Unbounded_Sequence_String(_max, _len, _val, _rel) {}

      

        inline CPortNames& operator = (const CPortNames& _s) {
          _CORBA_Unbounded_Sequence_String::operator=(_s);
          return *this;
        }
      };

      class CPortNames_out;

      class CPortNames_var {
      public:
        inline CPortNames_var() : _pd_seq(0) {}
        inline CPortNames_var(CPortNames* _s) : _pd_seq(_s) {}
        inline CPortNames_var(const CPortNames_var& _s) {
          if( _s._pd_seq )  _pd_seq = new CPortNames(*_s._pd_seq);
          else              _pd_seq = 0;
        }
        inline ~CPortNames_var() { if( _pd_seq )  delete _pd_seq; }
          
        inline CPortNames_var& operator = (CPortNames* _s) {
          if( _pd_seq )  delete _pd_seq;
          _pd_seq = _s;
          return *this;
        }
        inline CPortNames_var& operator = (const CPortNames_var& _s) {
          if( _s._pd_seq ) {
            if( !_pd_seq )  _pd_seq = new CPortNames;
            *_pd_seq = *_s._pd_seq;
          } else if( _pd_seq ) {
            delete _pd_seq;
            _pd_seq = 0;
          }
          return *this;
        }
        inline _CORBA_String_element operator [] (_CORBA_ULong _s) {
          return (*_pd_seq)[_s];
        }

      

        inline CPortNames* operator -> () { return _pd_seq; }
        inline const CPortNames* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
        inline operator CPortNames& () const { return *_pd_seq; }
#else
        inline operator const CPortNames& () const { return *_pd_seq; }
        inline operator CPortNames& () { return *_pd_seq; }
#endif
          
        inline const CPortNames& in() const { return *_pd_seq; }
        inline CPortNames&       inout()    { return *_pd_seq; }
        inline CPortNames*&      out() {
          if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
          return _pd_seq;
        }
        inline CPortNames* _retn() { CPortNames* tmp = _pd_seq; _pd_seq = 0; return tmp; }
          
        friend class CPortNames_out;
        
      private:
        CPortNames* _pd_seq;
      };

      class CPortNames_out {
      public:
        inline CPortNames_out(CPortNames*& _s) : _data(_s) { _data = 0; }
        inline CPortNames_out(CPortNames_var& _s)
          : _data(_s._pd_seq) { _s = (CPortNames*) 0; }
        inline CPortNames_out(const CPortNames_out& _s) : _data(_s._data) {}
        inline CPortNames_out& operator = (const CPortNames_out& _s) {
          _data = _s._data;
          return *this;
        }
        inline CPortNames_out& operator = (CPortNames* _s) {
          _data = _s;
          return *this;
        }
        inline operator CPortNames*&()  { return _data; }
        inline CPortNames*& ptr()       { return _data; }
        inline CPortNames* operator->() { return _data; }

        inline _CORBA_String_element operator [] (_CORBA_ULong _i) {
          return (*_data)[_i];
        }

      

        CPortNames*& _data;

      private:
        CPortNames_out();
        CPortNames_out& operator=(const CPortNames_var&);
      };

      static _dyn_attr const ::CORBA::TypeCode_ptr _tc_CPortDescriptions;

      class CPortDescriptions_var;

      class CPortDescriptions : public _CORBA_Unbounded_Sequence< CPortDescription >  {
      public:
        typedef CPortDescriptions_var _var_type;
        inline CPortDescriptions() {}
        inline CPortDescriptions(const CPortDescriptions& _s)
          : _CORBA_Unbounded_Sequence< CPortDescription > (_s) {}

        inline CPortDescriptions(_CORBA_ULong _max)
          : _CORBA_Unbounded_Sequence< CPortDescription > (_max) {}
        inline CPortDescriptions(_CORBA_ULong _max, _CORBA_ULong _len, CPortDescription* _val, _CORBA_Boolean _rel=0)
          : _CORBA_Unbounded_Sequence< CPortDescription > (_max, _len, _val, _rel) {}

      

        inline CPortDescriptions& operator = (const CPortDescriptions& _s) {
          _CORBA_Unbounded_Sequence< CPortDescription > ::operator=(_s);
          return *this;
        }
      };

      class CPortDescriptions_out;

      class CPortDescriptions_var {
      public:
        inline CPortDescriptions_var() : _pd_seq(0) {}
        inline CPortDescriptions_var(CPortDescriptions* _s) : _pd_seq(_s) {}
        inline CPortDescriptions_var(const CPortDescriptions_var& _s) {
          if( _s._pd_seq )  _pd_seq = new CPortDescriptions(*_s._pd_seq);
          else              _pd_seq = 0;
        }
        inline ~CPortDescriptions_var() { if( _pd_seq )  delete _pd_seq; }
          
        inline CPortDescriptions_var& operator = (CPortDescriptions* _s) {
          if( _pd_seq )  delete _pd_seq;
          _pd_seq = _s;
          return *this;
        }
        inline CPortDescriptions_var& operator = (const CPortDescriptions_var& _s) {
          if( _s._pd_seq ) {
            if( !_pd_seq )  _pd_seq = new CPortDescriptions;
            *_pd_seq = *_s._pd_seq;
          } else if( _pd_seq ) {
            delete _pd_seq;
            _pd_seq = 0;
          }
          return *this;
        }
        inline CPortDescription& operator [] (_CORBA_ULong _s) {
          return (*_pd_seq)[_s];
        }

      

        inline CPortDescriptions* operator -> () { return _pd_seq; }
        inline const CPortDescriptions* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
        inline operator CPortDescriptions& () const { return *_pd_seq; }
#else
        inline operator const CPortDescriptions& () const { return *_pd_seq; }
        inline operator CPortDescriptions& () { return *_pd_seq; }
#endif
          
        inline const CPortDescriptions& in() const { return *_pd_seq; }
        inline CPortDescriptions&       inout()    { return *_pd_seq; }
        inline CPortDescriptions*&      out() {
          if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
          return _pd_seq;
        }
        inline CPortDescriptions* _retn() { CPortDescriptions* tmp = _pd_seq; _pd_seq = 0; return tmp; }
          
        friend class CPortDescriptions_out;
        
      private:
        CPortDescriptions* _pd_seq;
      };

      class CPortDescriptions_out {
      public:
        inline CPortDescriptions_out(CPortDescriptions*& _s) : _data(_s) { _data = 0; }
        inline CPortDescriptions_out(CPortDescriptions_var& _s)
          : _data(_s._pd_seq) { _s = (CPortDescriptions*) 0; }
        inline CPortDescriptions_out(const CPortDescriptions_out& _s) : _data(_s._data) {}
        inline CPortDescriptions_out& operator = (const CPortDescriptions_out& _s) {
          _data = _s._data;
          return *this;
        }
        inline CPortDescriptions_out& operator = (CPortDescriptions* _s) {
          _data = _s;
          return *this;
        }
        inline operator CPortDescriptions*&()  { return _data; }
        inline CPortDescriptions*& ptr()       { return _data; }
        inline CPortDescriptions* operator->() { return _data; }

        inline CPortDescription& operator [] (_CORBA_ULong _i) {
          return (*_data)[_i];
        }

      

        CPortDescriptions*& _data;

      private:
        CPortDescriptions_out();
        CPortDescriptions_out& operator=(const CPortDescriptions_var&);
      };

    
    };

    class _objref_CDataFlowInterface :
      public virtual ::CORBA::Object,
      public virtual omniObjRef
    {
    public:
      CDataFlowInterface::CPortNames* getPorts();
      CDataFlowInterface::CPortDescriptions* getPortDescriptions();
      CPortType getPortType(const char* port_name);
      char* getDataType(const char* port_name);
      ::CORBA::Boolean isConnected(const char* port_name);
      void disconnectPort(const char* port_name);
      CChannelElement_ptr buildChannelOutput(const char* input_port, ::RTT::corba::CConnPolicy& policy);
      CChannelElement_ptr buildChannelInput(const char* output_port, ::RTT::corba::CConnPolicy& policy);
      ::CORBA::Boolean createConnection(const char* local_port, ::RTT::corba::CDataFlowInterface_ptr remote_ports, const char* remote_port, ::RTT::corba::CConnPolicy& policy);
      ::CORBA::Boolean removeConnection(const char* local_port, ::RTT::corba::CDataFlowInterface_ptr remote_ports, const char* remote_port);
      ::CORBA::Boolean createStream(const char* local_port, ::RTT::corba::CConnPolicy& policy);
      void removeStream(const char* local_port, const char* stream_name);
      ::CORBA::Boolean channelReady(const char* input_port, ::RTT::corba::CChannelElement_ptr channel, const ::RTT::corba::CConnPolicy& cp);

      inline _objref_CDataFlowInterface()  { _PR_setobj(0); }  // nil
      _objref_CDataFlowInterface(omniIOR*, omniIdentity*);

    protected:
      virtual ~_objref_CDataFlowInterface();

      
    private:
      virtual void* _ptrToObjRef(const char*);

      _objref_CDataFlowInterface(const _objref_CDataFlowInterface&);
      _objref_CDataFlowInterface& operator = (const _objref_CDataFlowInterface&);
      // not implemented

      friend class CDataFlowInterface;
    };

    class _pof_CDataFlowInterface : public _OMNI_NS(proxyObjectFactory) {
    public:
      inline _pof_CDataFlowInterface() : _OMNI_NS(proxyObjectFactory)(CDataFlowInterface::_PD_repoId) {}
      virtual ~_pof_CDataFlowInterface();

      virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
      virtual _CORBA_Boolean is_a(const char*) const;
    };

    class _impl_CDataFlowInterface :
      public virtual omniServant
    {
    public:
      virtual ~_impl_CDataFlowInterface();

      virtual CDataFlowInterface::CPortNames* getPorts() = 0;
      virtual CDataFlowInterface::CPortDescriptions* getPortDescriptions() = 0;
      virtual CPortType getPortType(const char* port_name) = 0;
      virtual char* getDataType(const char* port_name) = 0;
      virtual ::CORBA::Boolean isConnected(const char* port_name) = 0;
      virtual void disconnectPort(const char* port_name) = 0;
      virtual CChannelElement_ptr buildChannelOutput(const char* input_port, ::RTT::corba::CConnPolicy& policy) = 0;
      virtual CChannelElement_ptr buildChannelInput(const char* output_port, ::RTT::corba::CConnPolicy& policy) = 0;
      virtual ::CORBA::Boolean createConnection(const char* local_port, ::RTT::corba::CDataFlowInterface_ptr remote_ports, const char* remote_port, ::RTT::corba::CConnPolicy& policy) = 0;
      virtual ::CORBA::Boolean removeConnection(const char* local_port, ::RTT::corba::CDataFlowInterface_ptr remote_ports, const char* remote_port) = 0;
      virtual ::CORBA::Boolean createStream(const char* local_port, ::RTT::corba::CConnPolicy& policy) = 0;
      virtual void removeStream(const char* local_port, const char* stream_name) = 0;
      virtual ::CORBA::Boolean channelReady(const char* input_port, ::RTT::corba::CChannelElement_ptr channel, const ::RTT::corba::CConnPolicy& cp) = 0;
      
    public:  // Really protected, workaround for xlC
      virtual _CORBA_Boolean _dispatch(omniCallHandle&);

    private:
      virtual void* _ptrToInterface(const char*);
      virtual const char* _mostDerivedRepoId();
      
    };


    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CDataFlowInterface;

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

    class CChannelElement :
      public virtual RTT::corba::_impl_CChannelElement,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~CChannelElement();

      inline ::RTT::corba::CChannelElement_ptr _this() {
        return (::RTT::corba::CChannelElement_ptr) _do_this(::RTT::corba::CChannelElement::_PD_repoId);
      }
    };

    class CRemoteChannelElement :
      public virtual RTT::corba::_impl_CRemoteChannelElement,
      public virtual CChannelElement
    {
    public:
      virtual ~CRemoteChannelElement();

      inline ::RTT::corba::CRemoteChannelElement_ptr _this() {
        return (::RTT::corba::CRemoteChannelElement_ptr) _do_this(::RTT::corba::CRemoteChannelElement::_PD_repoId);
      }
    };

    class CDataFlowInterface :
      public virtual RTT::corba::_impl_CDataFlowInterface,
      public virtual ::PortableServer::ServantBase
    {
    public:
      virtual ~CDataFlowInterface();

      inline ::RTT::corba::CDataFlowInterface_ptr _this() {
        return (::RTT::corba::CDataFlowInterface_ptr) _do_this(::RTT::corba::CDataFlowInterface::_PD_repoId);
      }
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(RTT::corba::CFlowStatus _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTT::corba::CFlowStatus& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTT::corba::CNewData) {
    _e = (RTT::corba::CFlowStatus) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTT::corba::CFlowStatus _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CFlowStatus& _s);

inline void operator >>=(RTT::corba::CConnectionModel _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTT::corba::CConnectionModel& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTT::corba::CCircularBuffer) {
    _e = (RTT::corba::CConnectionModel) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTT::corba::CConnectionModel _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CConnectionModel& _s);

inline void operator >>=(RTT::corba::CLockPolicy _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTT::corba::CLockPolicy& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTT::corba::CLockFree) {
    _e = (RTT::corba::CLockPolicy) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTT::corba::CLockPolicy _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CLockPolicy& _s);

extern void operator<<=(::CORBA::Any& _a, const RTT::corba::CConnPolicy& _s);
extern void operator<<=(::CORBA::Any& _a, RTT::corba::CConnPolicy* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CConnPolicy*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CConnPolicy*& _sp);

void operator<<=(::CORBA::Any& _a, RTT::corba::CChannelElement_ptr _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CChannelElement_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CChannelElement_ptr& _s);

void operator<<=(::CORBA::Any& _a, RTT::corba::CRemoteChannelElement_ptr _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CRemoteChannelElement_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CRemoteChannelElement_ptr& _s);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CNoSuchPortException& _s);
void operator<<=(::CORBA::Any& _a, const RTT::corba::CNoSuchPortException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CNoSuchPortException*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CNoCorbaTransport& _s);
void operator<<=(::CORBA::Any& _a, const RTT::corba::CNoCorbaTransport* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CNoCorbaTransport*& _sp);

inline void operator >>=(RTT::corba::CPortType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (RTT::corba::CPortType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= RTT::corba::COutput) {
    _e = (RTT::corba::CPortType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, RTT::corba::CPortType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CPortType& _s);

extern void operator<<=(::CORBA::Any& _a, const RTT::corba::CPortDescription& _s);
extern void operator<<=(::CORBA::Any& _a, RTT::corba::CPortDescription* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CPortDescription*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CPortDescription*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CDataFlowInterface::CPortNames& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CDataFlowInterface::CPortNames* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CDataFlowInterface::CPortNames*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CDataFlowInterface::CPortNames*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CDataFlowInterface::CPortDescriptions& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CDataFlowInterface::CPortDescriptions* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CDataFlowInterface::CPortDescriptions*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CDataFlowInterface::CPortDescriptions*& _sp);

void operator<<=(::CORBA::Any& _a, RTT::corba::CDataFlowInterface_ptr _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CDataFlowInterface_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CDataFlowInterface_ptr& _s);



inline void
RTT::corba::CChannelElement::_marshalObjRef(::RTT::corba::CChannelElement_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RTT::corba::CRemoteChannelElement::_marshalObjRef(::RTT::corba::CRemoteChannelElement_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
RTT::corba::CDataFlowInterface::_marshalObjRef(::RTT::corba::CDataFlowInterface_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_DataFlow
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_DataFlow
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_DataFlow
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_DataFlow
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataFlow
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_DataFlow
#endif

#endif  // __DataFlow_hh__

