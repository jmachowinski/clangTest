// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __OrocosTypes_hh__
#define __OrocosTypes_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE RTT

_CORBA_MODULE_BEG

  _CORBA_MODULE corba

  _CORBA_MODULE_BEG

    struct Pair {
      typedef _CORBA_ConstrType_Variable_Var<Pair> _var_type;

      
      ::CORBA::Any t1;

      ::CORBA::Any t2;

    

      void operator>>= (cdrStream &) const;
      void operator<<= (cdrStream &);
    };

    typedef Pair::_var_type Pair_var;

    typedef _CORBA_ConstrType_Variable_OUT_arg< Pair,Pair_var > Pair_out;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Pair;

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_CAnySequence;

    class CAnySequence_var;

    class CAnySequence : public _CORBA_Unbounded_Sequence< ::CORBA::Any >  {
    public:
      typedef CAnySequence_var _var_type;
      inline CAnySequence() {}
      inline CAnySequence(const CAnySequence& _s)
        : _CORBA_Unbounded_Sequence< ::CORBA::Any > (_s) {}

      inline CAnySequence(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< ::CORBA::Any > (_max) {}
      inline CAnySequence(_CORBA_ULong _max, _CORBA_ULong _len, ::CORBA::Any* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< ::CORBA::Any > (_max, _len, _val, _rel) {}

    

      inline CAnySequence& operator = (const CAnySequence& _s) {
        _CORBA_Unbounded_Sequence< ::CORBA::Any > ::operator=(_s);
        return *this;
      }
    };

    class CAnySequence_out;

    class CAnySequence_var {
    public:
      inline CAnySequence_var() : _pd_seq(0) {}
      inline CAnySequence_var(CAnySequence* _s) : _pd_seq(_s) {}
      inline CAnySequence_var(const CAnySequence_var& _s) {
        if( _s._pd_seq )  _pd_seq = new CAnySequence(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~CAnySequence_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline CAnySequence_var& operator = (CAnySequence* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline CAnySequence_var& operator = (const CAnySequence_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new CAnySequence;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline ::CORBA::Any& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline CAnySequence* operator -> () { return _pd_seq; }
      inline const CAnySequence* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator CAnySequence& () const { return *_pd_seq; }
#else
      inline operator const CAnySequence& () const { return *_pd_seq; }
      inline operator CAnySequence& () { return *_pd_seq; }
#endif
        
      inline const CAnySequence& in() const { return *_pd_seq; }
      inline CAnySequence&       inout()    { return *_pd_seq; }
      inline CAnySequence*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline CAnySequence* _retn() { CAnySequence* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class CAnySequence_out;
      
    private:
      CAnySequence* _pd_seq;
    };

    class CAnySequence_out {
    public:
      inline CAnySequence_out(CAnySequence*& _s) : _data(_s) { _data = 0; }
      inline CAnySequence_out(CAnySequence_var& _s)
        : _data(_s._pd_seq) { _s = (CAnySequence*) 0; }
      inline CAnySequence_out(const CAnySequence_out& _s) : _data(_s._data) {}
      inline CAnySequence_out& operator = (const CAnySequence_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline CAnySequence_out& operator = (CAnySequence* _s) {
        _data = _s;
        return *this;
      }
      inline operator CAnySequence*&()  { return _data; }
      inline CAnySequence*& ptr()       { return _data; }
      inline CAnySequence* operator->() { return _data; }

      inline ::CORBA::Any& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      CAnySequence*& _data;

    private:
      CAnySequence_out();
      CAnySequence_out& operator=(const CAnySequence_var&);
    };

    _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_PairSeq;

    class PairSeq_var;

    class PairSeq : public _CORBA_Unbounded_Sequence< Pair >  {
    public:
      typedef PairSeq_var _var_type;
      inline PairSeq() {}
      inline PairSeq(const PairSeq& _s)
        : _CORBA_Unbounded_Sequence< Pair > (_s) {}

      inline PairSeq(_CORBA_ULong _max)
        : _CORBA_Unbounded_Sequence< Pair > (_max) {}
      inline PairSeq(_CORBA_ULong _max, _CORBA_ULong _len, Pair* _val, _CORBA_Boolean _rel=0)
        : _CORBA_Unbounded_Sequence< Pair > (_max, _len, _val, _rel) {}

    

      inline PairSeq& operator = (const PairSeq& _s) {
        _CORBA_Unbounded_Sequence< Pair > ::operator=(_s);
        return *this;
      }
    };

    class PairSeq_out;

    class PairSeq_var {
    public:
      inline PairSeq_var() : _pd_seq(0) {}
      inline PairSeq_var(PairSeq* _s) : _pd_seq(_s) {}
      inline PairSeq_var(const PairSeq_var& _s) {
        if( _s._pd_seq )  _pd_seq = new PairSeq(*_s._pd_seq);
        else              _pd_seq = 0;
      }
      inline ~PairSeq_var() { if( _pd_seq )  delete _pd_seq; }
        
      inline PairSeq_var& operator = (PairSeq* _s) {
        if( _pd_seq )  delete _pd_seq;
        _pd_seq = _s;
        return *this;
      }
      inline PairSeq_var& operator = (const PairSeq_var& _s) {
        if( _s._pd_seq ) {
          if( !_pd_seq )  _pd_seq = new PairSeq;
          *_pd_seq = *_s._pd_seq;
        } else if( _pd_seq ) {
          delete _pd_seq;
          _pd_seq = 0;
        }
        return *this;
      }
      inline Pair& operator [] (_CORBA_ULong _s) {
        return (*_pd_seq)[_s];
      }

    

      inline PairSeq* operator -> () { return _pd_seq; }
      inline const PairSeq* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
      inline operator PairSeq& () const { return *_pd_seq; }
#else
      inline operator const PairSeq& () const { return *_pd_seq; }
      inline operator PairSeq& () { return *_pd_seq; }
#endif
        
      inline const PairSeq& in() const { return *_pd_seq; }
      inline PairSeq&       inout()    { return *_pd_seq; }
      inline PairSeq*&      out() {
        if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
        return _pd_seq;
      }
      inline PairSeq* _retn() { PairSeq* tmp = _pd_seq; _pd_seq = 0; return tmp; }
        
      friend class PairSeq_out;
      
    private:
      PairSeq* _pd_seq;
    };

    class PairSeq_out {
    public:
      inline PairSeq_out(PairSeq*& _s) : _data(_s) { _data = 0; }
      inline PairSeq_out(PairSeq_var& _s)
        : _data(_s._pd_seq) { _s = (PairSeq*) 0; }
      inline PairSeq_out(const PairSeq_out& _s) : _data(_s._data) {}
      inline PairSeq_out& operator = (const PairSeq_out& _s) {
        _data = _s._data;
        return *this;
      }
      inline PairSeq_out& operator = (PairSeq* _s) {
        _data = _s;
        return *this;
      }
      inline operator PairSeq*&()  { return _data; }
      inline PairSeq*& ptr()       { return _data; }
      inline PairSeq* operator->() { return _data; }

      inline Pair& operator [] (_CORBA_ULong _i) {
        return (*_data)[_i];
      }

    

      PairSeq*& _data;

    private:
      PairSeq_out();
      PairSeq_out& operator=(const PairSeq_var&);
    };

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE POA_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END



_CORBA_MODULE OBV_RTT
_CORBA_MODULE_BEG

  _CORBA_MODULE corba
  _CORBA_MODULE_BEG

  _CORBA_MODULE_END

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

extern void operator<<=(::CORBA::Any& _a, const RTT::corba::Pair& _s);
extern void operator<<=(::CORBA::Any& _a, RTT::corba::Pair* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::Pair*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::Pair*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::CAnySequence& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::CAnySequence* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::CAnySequence*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::CAnySequence*& _sp);

void operator<<=(::CORBA::Any& _a, const RTT::corba::PairSeq& _s);
void operator<<=(::CORBA::Any& _a, RTT::corba::PairSeq* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, RTT::corba::PairSeq*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const RTT::corba::PairSeq*& _sp);





#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_OrocosTypes
#endif

#endif  // __OrocosTypes_hh__

